# let us evaluate which branch we are working with.
GIT_BRANCH_GOT=`echo ${BRANCH_INFO} | cut -d "/" -f2 | tr '[:upper:]' '[:lower:]'`
echo "SIMPRAGMA: Jenkins running for BRANCH=${GIT_BRANCH_GOT}"

case $GIT_BRANCH_GOT in
        master)
                echo "SIMPRAGMA: BRANCH=master is choosen for this build"
                # Write your branch specific build code here
My_App_Name="${GIT_BRANCH_GOT}_travelwebbe"
My_App_Version="v.2.8"
My_App_Port="8030:8080"
#My_App_Volumes=""
My_App_DB_Image=mysql:5.7.27
My_App_DB_Volumes="\/root\/data\/${GIT_BRANCH_GOT}_travelweb_be_tip_plan\/:\/var\/lib\/mysql"
                ;;
        feature)
                echo "SIMPRAGMA: BRANCH=feature is choosen for this build"
                # Write your branch specific build code here
                # Docker Container Name and Version
My_App_Name="${GIT_BRANCH_GOT}_travelwebbe"
My_App_Version="v.2.11"
My_App_Port="8031:8080"
#My_App_Volumes=""
My_App_DB_Image=mysql:5.7.27
My_App_DB_Volumes="\/root\/data\/${GIT_BRANCH_GOT}_travelweb_be_tip_plan\/:\/var\/lib\/mysql"
                ;;
        develop)
                echo "SIMPRAGMA: BRANCH=develop is choosen for this build"
                # Write your branch specific build code here
My_App_Name="${GIT_BRANCH_GOT}_travelwebbe"
My_App_Version="v.2.9"
My_App_Port="8032:8080"
#My_App_Volumes=""
My_App_DB_Image=mysql:5.7.27
My_App_DB_Volumes="\/root\/data\/${GIT_BRANCH_GOT}_travelweb_be_tip_plan\/:\/var\/lib\/mysql"
                ;;
        *)
                echo "branch not supported"
                exit 1
                ;;
esac

## Test system details..
Project_Name="TravelWeb_BE_tip_plan"
Test_System_Ip="198.58.112.23"
Test_System_Login="root"
# Using ssh keys.....not required.
#Test_System_Password="Simpragma123!"

# Deliverable location local and remote
Source_Path="./target/*"
Destination_Path="/root/${Project_Name}/"

# Nexus Repo
Nexus_Ip_Port="docker.simpragma.com"

# My kubernates node port
My_Node_Port="30001"

# SonarQube Server
SONAR_SERVER="http://sonar.simpragma.com"


#-----Create Build_steps file...START
#--comman to all the branches. hence creating outside.
cat > Build_Steps << EOFB
mvn clean install
EOFB
chmod 0777 Build_Steps

case $GIT_BRANCH_GOT in
master) 
echo "master"
;;
feature)
echo "feature"
;;
develop)
echo "feature"
;;
esac
#-----Create Build_steps file...END


#-----Create a dockerfile...START
cat > Dockerfile << EOF
FROM openjdk
VOLUME /tmp
COPY ./target/PlanManagement-0.0.1-SNAPSHOT.jar /PlanManagement-0.0.1-SNAPSHOT.jar
CMD java $JVM_OPTS -Dspring.profiles.active=MY_PROPERTY_FILE -jar /PlanManagement-0.0.1-SNAPSHOT.jar
EOF
chmod 0777 Dockerfile
#-----Create a dockerfile...END

#-----Create a docker_prepare0...START
case $GIT_BRANCH_GOT in
	master) 
cat > docker_prepare0 << EOFPROD
sed -i "s/MY_PROPERTY_FILE/prod/g" Dockerfile
exit $?
EOFPROD
	;;

	feature)
cat > docker_prepare0 << EOFDEV
sed -i "s/MY_PROPERTY_FILE/dev/g" Dockerfile
exit $?
EOFDEV
	;;

	develop)
cat > docker_prepare0 << EOFQA
sed -i "s/MY_PROPERTY_FILE/qa/g" Dockerfile
exit $?
EOFQA
	;;
esac
#-----Create a docker_prepare0...END

#-----Create a docker-compose file...START
cat > docker-compose.yml << EOFF
version: '2'
services:
    MY_APP_NAME:
#    build: .
     image: MY_DOCKER_REGISTRY/MY_APP_NAME:MY_IMAGE_VERSION
     links:
       - MY_APP_NAMEDB
     ports:
       - MY_APP_PORT
    MY_APP_NAMEDB:
     image: MY_APP_DB_IMAGE
     volumes:
       - MY_APP_DB_VOLUMES
     environment:
       MYSQL_ROOT: "root"
       MYSQL_ROOT_PASSWORD: "plan123"
       MYSQL_DB: "plan_management"
EOFF
chmod 0777 docker-compose.yml
#-----Create a docker-compose file...END

#-----Create a Docker_prepare file...START
cat > docker_prepare << EOFDP
#!/bin/bash
sed -i "s/MY_APP_NAME/${My_App_Name}/g" docker-compose.yml
sed -i "s/MY_APP_DB_IMAGE/${My_App_DB_Image}/g" docker-compose.yml
sed -i "s/MY_DOCKER_REGISTRY/${Nexus_Ip_Port}/g" docker-compose.yml
sed -i "s/MY_NODE_PORT/${My_Node_Port}/g" docker-compose.yml
sed -i "s/MY_IMAGE_VERSION/${My_App_Version}/g" docker-compose.yml
sed -i "s/MY_APP_DB_VOLUMES/${My_App_DB_Volumes}/g"  docker-compose.yml
sed -i "s/MY_APP_PORT/${My_App_Port}/g" docker-compose.yml
EOFDP
chmod 0777 docker_prepare
#-----Create a Docker_prepare file...END

#-----Create a sonar-project.properties file...START
cat > sonar-project.properties << EOFX
sonar.host.url=https://sonar.simpragma.com
sonar.login=admin
sonar.password=simpragma123!%
# sonar.organization=simpragma
# sonar.scm.provider=git
sonar.projectKey=TravelWeb_BE_tip_plan
sonar.projectName=TravelWeb_BE_tip_plan
sonar.projectVersion=1.0
sonar.sourceEncoding=UTF-8
sonar.sources=src
sonar.exclusions=**/node_modules/**,**/*.spec.ts
sonar.tests=src
sonar.test.inclusions=**/*.spec.ts
sonar.typescript.lcov.reportPaths=coverage/lcov.info
sonar.java.binaries=**/target/classes
EOFX
chmod 0777 sonar-project.properties
#-----Create a sonar-project.properties file...END
exit 0
